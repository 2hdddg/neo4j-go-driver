/*
 * Copyright (c) 2002-2018 "Neo4j,"
 * Neo4j Sweden AB [http://neo4j.com]
 *
 * This file is part of Neo4j.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package neo4j

// StatementType defines the type of the statement
type StatementType int

const (
	// StatementTypeReadOnly identifies a read-only statement
	StatementTypeReadOnly StatementType = 0
	// StatementTypeReadWrite identifies a read-write statement
	StatementTypeReadWrite = 1
	// StatementTypeWriteOnly identifies a write-only statement
	StatementTypeWriteOnly = 2
	// StatementTypeSchemaWrite identifies a schema-write statement
	StatementTypeSchemaWrite = 3
)

// ServerInfo contains basic information of the server
type ServerInfo struct {
	address string
	version string
}

// InputPosition contains information about a specific position in a statement
type InputPosition struct {
	offset int
	line   int
	column int
}

// Notification contains information about notifications generated by the server
type Notification struct {
	code        string
	title       string
	description string
	position    InputPosition
	severity    string
}

// Counters contains statistics about the changes made to the database made as part
// of the statement execution.
type Counters struct {
	nodesCreated         int
	nodesDeleted         int
	relationshipsCreated int
	relationshipsDeleted int
	propertiesSet        int
	labelsAdded          int
	labelsRemoved        int
	indexesAdded         int
	indexesRemoved       int
	constraintsAdded     int
	constraintsRemoved   int
}

// Plan describes the plan that the database planner produced
type Plan struct {
}

// Profile describes the plan that the database planner produced and executed
type Profile struct {
}

// ResultSummary contains information about statement execution.
type ResultSummary struct {
	statement             Statement
	counters              *Counters
	statementType         StatementType
	plan                  *Plan
	profile               *Profile
	notifications         *[]Notification
	resultsAvailableAfter int64
	resultsConsumedAfter  int64
	server                ServerInfo
}
