// Code generated by MockGen. DO NOT EDIT.
// Source: neo4j-go-connector/neo4j (interfaces: Connector)

// Package connector-mocks is a generated GoMock package.
package connector_mocks

import (
	gomock "github.com/golang/mock/gomock"
	neo4j "neo4j-go-connector/pkg"
	reflect "reflect"
)

// MockConnector is a mock of Connector interface
type MockConnector struct {
	ctrl     *gomock.Controller
	recorder *MockConnectorMockRecorder
}

// MockConnectorMockRecorder is the mock recorder for MockConnector
type MockConnectorMockRecorder struct {
	mock *MockConnector
}

// NewMockConnector creates a new mock instance
func NewMockConnector(ctrl *gomock.Controller) *MockConnector {
	mock := &MockConnector{ctrl: ctrl}
	mock.recorder = &MockConnectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockConnector) EXPECT() *MockConnectorMockRecorder {
	return m.recorder
}

// Close connector-mocks base method
func (m *MockConnector) Close() error {
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockConnectorMockRecorder) Close() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockConnector)(nil).Close))
}

// GetPool connector-mocks base method
func (m *MockConnector) GetPool() (neo4j.Pool, error) {
	ret := m.ctrl.Call(m, "GetPool")
	ret0, _ := ret[0].(neo4j.Pool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPool indicates an expected call of GetPool
func (mr *MockConnectorMockRecorder) GetPool() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPool", reflect.TypeOf((*MockConnector)(nil).GetPool))
}
